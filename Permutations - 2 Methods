// to generate all possible permutations

// Method 1 - to add and pop in new array and explore all ways in original array

class Solution {
public:
    int n;
    vector <int> temp;
    vector<vector<int>> result;
    unordered_set <int> st;
    void solve(vector<int>& temp,vector<int>& nums){
        if(temp.size() == n){
            result.push_back(temp);
            return;
        }
        for(int i = 0; i < n; i++){
            if(st.find(nums[i]) == st.end()){
                temp.push_back(nums[i]);
                st.insert(nums[i]);
                solve(temp,nums);
                temp.pop_back();
                st.erase(nums[i]);
            }
        }
    }
    vector<vector<int>> permute(vector<int>& nums) {
        n = nums.size();
        solve(temp,nums);
        return result;

        
    }
};

// METHOD 2 - to swap the orginal array numbers in itself

class Solution {
public:
    vector<vector<int>> result;
    int n;
    void solve(int idx, vector<int>& nums){
        if(idx == n){
            result.push_back(nums);
            return;
        }

        for(int i = idx; i < n; i++){
            swap(nums[i],nums[idx]);
            solve(idx+1, nums);
            swap(nums[i],nums[idx]);
        }
    }
    vector<vector<int>> permute(vector<int>& nums) {
        n = nums.size();
        solve(0,nums);
        return result;
        
    }
};



