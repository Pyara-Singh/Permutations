
// METHOD 1


class Solution {
public:
    int n;
    vector<vector<int>> result;

    void solve(unordered_map<int,int>& mp, vector<int>&temp){
        if(temp.size() == n){
            result.push_back(temp);
            return;
        }

        for(auto& [num,count] : mp){
            if(count == 0){
                continue;
            }
            temp.push_back(num);
            mp[num]--;

            solve(mp,temp);

            temp.pop_back();
            mp[num]++;
        }
    }
    vector<vector<int>> permuteUnique(vector<int>& nums) {
        n = nums.size();

        unordered_map<int,int> mp;

        for(int &num : nums){
            mp[num]++;
        }
        vector<int> temp;
        solve(mp,temp);

        return result;
    }

};

METHOD 2

class Solution {
public:
    int n;
    vector<vector<int>> result;

    void solve(vector<int> &nums, int idx){

        if(idx == n){
            result.push_back(nums);
        }
        unordered_set <int> uniqueSet;
        for(int i = idx; i < n; i++){
            if(uniqueSet.find(nums[i]) != uniqueSet.end()){
                continue;
            }
            uniqueSet.insert(nums[i]);
            swap(nums[i], nums[idx]);

            solve(nums, idx+1);

            swap(nums[i], nums[idx]);
        }

    }
    vector<vector<int>> permuteUnique(vector<int>& nums) {

        n = nums.size();

        solve(nums,0);
        return result;
        
    }
};
